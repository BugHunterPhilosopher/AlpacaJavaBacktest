import net.jacobpeterson.BuildSiteTask

plugins {
    id 'java'
    id 'application'
    id 'maven'
    id 'maven-publish'
}

group 'net.jacobpeterson'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

mainClassName = "net.jacobpeterson.AlpacaJavaBacktest"

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation group: 'io.github.mainstringargs', name: 'alpaca-java', version: '5.0.2'
    implementation group: 'com.sparkjava', name: 'spark-core', version: '2.8.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.0'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    // To run the playground test package: ./gradlew test -PincludePlaygroundTest
    if (!project.hasProperty("includePlaygroundTest")) {
        exclude "net/jacobpeterson/playground/**"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }

    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}


// To run the dev server with watchify: ./gradlew devSite --no-daemon
task devSite(type: BuildSiteTask) {
    siteDir = file("site")
    distDir = file("$buildDir/site")
    nodeJSBuildFile = file("site/build.js")
    startDevServer = true
}

task buildSite(type: BuildSiteTask) {
    siteDir = file("site")
    distDir = file("$buildDir/site")
    nodeJSBuildFile = file("site/build.js")
    startDevServer = false
}

processResources {
    dependsOn buildSite
    from("$buildDir/site") { into "site" }
}

processTestResources {
    dependsOn buildSite
    from("$buildDir/site") { into "site" }
}

build {
    finalizedBy publishToMavenLocal
}
